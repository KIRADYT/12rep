"""
Django settings for project project.

Generated by 'django-admin startproject' using Django 4.0.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""
import logging
import os
import sys
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-wuhs)@mh@7)4p+$p9qc$=pou*a9qz8hmrg2xj9i-ai3apr#n=!'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'django.contrib.sites',
    'django.contrib.flatpages',

    'fpages',
    'newapp',
    'django_filters',

    'sign',
    'protect',

    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    # ... include the providers you want to enable:
    'allauth.socialaccount.providers.google',

    'appointments',
    'django_apscheduler',
]

SITE_ID = 1

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.contrib.flatpages.middleware.FlatpageFallbackMiddleware',

    'django.middleware.cache.UpdateCacheMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.cache.FetchFromCacheMiddleware',
]

ROOT_URLCONF = 'project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'project.wsgi.application'

LOG_LEVEL = 'DEBUG' if DEBUG else 'INFO'

# Форматирование для вывода в консоль
CONSOLE_FORMAT = '%(asctime)s [%(levelname)s] %(message)s'
CONSOLE_DATE_FORMAT = '%Y-%m-%d %H:%M:%S'
CONSOLE_LEVEL = logging.DEBUG

# Форматирование для файловых логов
FILE_FORMAT = '%(asctime)s [%(levelname)s] %(module)s: %(message)s'
FILE_DATE_FORMAT = '%Y-%m-%d %H:%M:%S'
FILE_LEVEL = logging.INFO

# Форматирование для файла ошибок
ERROR_FILE_FORMAT = '%(asctime)s [%(levelname)s] %(pathname)s: %(message)s\n%(exc_info)s'
ERROR_FILE_DATE_FORMAT = '%Y-%m-%d %H:%M:%S'
ERROR_FILE_LEVEL = logging.ERROR

# Форматирование для безопасности
SECURITY_FILE_FORMAT = '%(asctime)s [%(levelname)s] %(module)s: %(message)s'
SECURITY_FILE_DATE_FORMAT = '%Y-%m-%d %H:%M:%S'
SECURITY_FILE_LEVEL = logging.INFO

# Формат для отправки на почту
EMAIL_FORMAT = '%(asctime)s [%(levelname)s] %(pathname)s: %(message)s'
EMAIL_DATE_FORMAT = '%Y-%m-%d %H:%M:%S'
EMAIL_LEVEL = logging.ERROR

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'console_formatter': {
            'format': CONSOLE_FORMAT,
            'datefmt': CONSOLE_DATE_FORMAT,
        },
        'file_formatter': {
            'format': FILE_FORMAT,
            'datefmt': FILE_DATE_FORMAT,
        },
        'error_file_formatter': {
            'format': ERROR_FILE_FORMAT,
            'datefmt': ERROR_FILE_DATE_FORMAT,
        },
        'security_file_formatter': {
            'format': SECURITY_FILE_FORMAT,
            'datefmt': SECURITY_FILE_DATE_FORMAT,
        },
        'email_formatter': {
            'format': EMAIL_FORMAT,
            'datefmt': EMAIL_DATE_FORMAT,
        },
    },
    'handlers': {
        'console_handler': {
            'class': 'logging.StreamHandler',
            'formatter': 'console_formatter',
            'level': CONSOLE_LEVEL,
            'stream': sys.stdout,
        },
        'general_file_handler': {
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': 'general.log',
            'formatter': 'file_formatter',
            'level': FILE_LEVEL,
            'maxBytes': 1024 * 1024 * 5,  # 5MB
            'backupCount': 5,
        },
        'errors_file_handler': {
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': 'errors.log',
            'formatter': 'error_file_formatter',
            'level': ERROR_FILE_LEVEL,
            'maxBytes': 1024 * 1024 * 5,  # 5MB
            'backupCount': 5,
        },
        'security_file_handler': {
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': 'security.log',
            'formatter': 'security_file_formatter',
            'level': SECURITY_FILE_LEVEL,
            'maxBytes': 1024 * 1024 * 5,  # 5MB
            'backupCount': 5,
        },
        'mail_admins_handler': {
            'class': 'django.utils.log.AdminEmailHandler',
            'formatter': 'email_formatter',
            'level': EMAIL_LEVEL,
            'include_html': False,
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console_handler', 'general_file_handler', 'errors_file_handler'],
            'level': LOG_LEVEL,
            'propagate': True,
        },
        'django.request': {
            'handlers': ['errors_file_handler', 'general_file_handler', 'mail_admins_handler'],
            'level': LOG_LEVEL,
            'propagate': False,
        },
        'django.server': {
            'handlers': ['errors_file_handler', 'mail_admins_handler'],
            'level': LOG_LEVEL,
            'propagate': False,
        },
        'django.template': {
            'handlers': ['errors_file_handler', 'mail_admins_handler'],
            'level': LOG_LEVEL,
            'propagate': False,
        },
        'django.db.backends': {
            'handlers': ['errors_file_handler', 'mail_admins_handler'],
            'level': LOG_LEVEL,
            'propagate': False,
        },
        'django.security': {
            'handlers': ['security_file_handler'],
            'level': LOG_LEVEL,
            'propagate': False,
        },
    },
    'root': {
        'handlers': ['console_handler'],
        'level': LOG_LEVEL,
    },
}
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

CACHES = {
    'default': {
        'TIMEOUT': 300,  # добавляем стандартное время ожидания в минуту (по умолчанию это 5 минут — 300 секунд)
        'BACKEND': 'django.core.cache.backends.filebased.FileBasedCache',
        'LOCATION': os.path.join(BASE_DIR, 'cache_files'),
        # Указываем, куда будем сохранять кэшируемые файлы! Не забываем создать папку cache_files внутри папки с manage.py!
    }
}

# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

STATICFILES_DIRS = [BASE_DIR / "newapp/static"]

# LOGIN_URL = 'sign/login/'
LOGIN_REDIRECT_URL = '/news/'

LOGIN_URL = '/accounts/login/'

ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_UNIQUE_EMAIL = True
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_AUTHENTICATION_METHOD = 'email'
ACCOUNT_EMAIL_VERIFICATION = 'none'

ACCOUNT_FORMS = {'signup': 'sign.models.BasicSignupForm'}

EMAIL_HOST = 'smtp.yandex.ru'  # адрес сервера Яндекс-почты для всех один и тот же
EMAIL_PORT = 465  # порт smtp сервера тоже одинаковый
EMAIL_HOST_USER = 'qwertysoyeon'  # ваше имя пользователя, например, если ваша почта user@yandex.ru, то сюда надо писать user, иными словами, это всё то что идёт до собаки
EMAIL_HOST_PASSWORD = '77312DuMp'  # пароль от почты
EMAIL_USE_SSL = True  # Яндекс использует ssl, подробнее о том, что это, почитайте в дополнительных источниках, но включать его здесь обязательно

ADMINS = [
    ('Kirill', 'kirillrodionov9017@gmail.com'),
    # список всех админов в формате ('имя', 'их почта')
]
SERVER_EMAIL = 'qwertysoyeon@yandex.ru'  # это будет у нас вместо аргумента FROM в массовой рассылке

DEFAULT_FROM_EMAIL = EMAIL_HOST_USER

APSCHEDULER_DATETIME_FORMAT = "N j, Y, f:s a"
APSCHEDULER_RUN_NOW_TIMEOUT = 25  # Seconds

CELERY_BROKER_URL = 'redis://localhost:6379/0'
CELERY_RESULT_BACKEND = 'redis://localhost:6379'
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = 'Europe/Moscow'
